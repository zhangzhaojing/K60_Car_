###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       30/Dec/2017  19:25:56
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\19071_000\Desktop\K60_Car\lib\peripheral\servo.c
#    Command line =  
#        -f C:\Users\19071_~1\AppData\Local\Temp\EWEE0E.tmp
#        (C:\Users\19071_000\Desktop\K60_Car\lib\peripheral\servo.c -D LPLD_K60
#        -D USE_K60DZ10 -lCN
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -lB
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -o
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\app\ -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\class\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\peripheral\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List\servo.lst
#    Object file  =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj\servo.o
#
###############################################################################

C:\Users\19071_000\Desktop\K60_Car\lib\peripheral\servo.c
      1          #include "servo.h"
      2          

   \                                 In section .bss, align 4
      3          static servo_t *srv;
   \                     srv:
   \   00000000                      DS8 4
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void servo__config(servo_t *srv_usr){
   \                     servo__config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
      6             srv=srv_usr;
   \   00000004   0x....             LDR.N    R1,??DataTable4
   \   00000006   0x6008             STR      R0,[R1, #+0]
      7             FTM_InitTypeDef ftm_init_struct={0};
   \   00000008   0xA803             ADD      R0,SP,#+12
   \   0000000A   0x211C             MOVS     R1,#+28
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
      8             ftm_init_struct.FTM_Ftmx=srv->FTMn;
   \   00000010   0x....             LDR.N    R0,??DataTable4
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x9003             STR      R0,[SP, #+12]
      9             ftm_init_struct.FTM_Mode=FTM_MODE_PWM;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     10             ftm_init_struct.FTM_PwmFreq=srv->freq;
   \   0000001E   0x....             LDR.N    R0,??DataTable4
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x6880             LDR      R0,[R0, #+8]
   \   00000024   0x9005             STR      R0,[SP, #+20]
     11             LPLD_FTM_Init(ftm_init_struct);
   \   00000026   0xA903             ADD      R1,SP,#+12
   \   00000028   0xB084             SUB      SP,SP,#+16
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x221C             MOVS     R2,#+28
   \   0000002E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000032   0xBC0F             POP      {R0-R3}
   \   00000034   0x.... 0x....      BL       LPLD_FTM_Init
     12             LPLD_FTM_PWM_Enable(srv->FTMn,
     13                                  srv->FTM_Chn,
     14                                  srv->median, 
     15                                  srv->PTXn,
     16                                  ALIGN_LEFT 
     17                                  );
   \   00000038   0x2028             MOVS     R0,#+40
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x7943             LDRB     R3,[R0, #+5]
   \   00000042   0x....             LDR.N    R0,??DataTable4
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x68C2             LDR      R2,[R0, #+12]
   \   00000048   0x....             LDR.N    R0,??DataTable4
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x7901             LDRB     R1,[R0, #+4]
   \   0000004E   0x....             LDR.N    R0,??DataTable4
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     18             srv->duty = srv->median;
   \   00000058   0x....             LDR.N    R0,??DataTable4
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x68C0             LDR      R0,[R0, #+12]
   \   0000005E   0x....             LDR.N    R1,??DataTable4
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0x6288             STR      R0,[R1, #+40]
     19             srv->dir=2;
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x....             LDR.N    R1,??DataTable4
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0x62C8             STR      R0,[R1, #+44]
     20          }
   \   0000006C   0xB00B             ADD      SP,SP,#+44
   \   0000006E   0xBD00             POP      {PC}             ;; return

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void servo__set_duty(volatile uint32 duty){
   \                     servo__set_duty: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
     23              srv->duty=duty;
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable4
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x6288             STR      R0,[R1, #+40]
     24              if(srv->duty>(srv->median+srv->amplitude))  srv->duty=srv->median+srv->amplitude;
   \   0000000A   0x....             LDR.N    R0,??DataTable4
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x68C1             LDR      R1,[R0, #+12]
   \   00000010   0x....             LDR.N    R0,??DataTable4
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x6900             LDR      R0,[R0, #+16]
   \   00000016   0x1841             ADDS     R1,R0,R1
   \   00000018   0x....             LDR.N    R0,??DataTable4
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x6A80             LDR      R0,[R0, #+40]
   \   0000001E   0x4281             CMP      R1,R0
   \   00000020   0xD20A             BCS.N    ??servo__set_duty_0
   \   00000022   0x....             LDR.N    R0,??DataTable4
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x68C1             LDR      R1,[R0, #+12]
   \   00000028   0x....             LDR.N    R0,??DataTable4
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x6900             LDR      R0,[R0, #+16]
   \   0000002E   0x1841             ADDS     R1,R0,R1
   \   00000030   0x....             LDR.N    R0,??DataTable4
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x6281             STR      R1,[R0, #+40]
   \   00000036   0xE015             B.N      ??servo__set_duty_1
     25              else if (srv->duty<(srv->median-srv->amplitude))  srv->duty=srv->median-srv->amplitude;
   \                     ??servo__set_duty_0: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable4
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x6A81             LDR      R1,[R0, #+40]
   \   0000003E   0x....             LDR.N    R0,??DataTable4
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x68C2             LDR      R2,[R0, #+12]
   \   00000044   0x....             LDR.N    R0,??DataTable4
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x6900             LDR      R0,[R0, #+16]
   \   0000004A   0x1A12             SUBS     R2,R2,R0
   \   0000004C   0x4291             CMP      R1,R2
   \   0000004E   0xD209             BCS.N    ??servo__set_duty_1
   \   00000050   0x....             LDR.N    R0,??DataTable4
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x68C1             LDR      R1,[R0, #+12]
   \   00000056   0x....             LDR.N    R0,??DataTable4
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x6900             LDR      R0,[R0, #+16]
   \   0000005C   0x1A09             SUBS     R1,R1,R0
   \   0000005E   0x....             LDR.N    R0,??DataTable4
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x6281             STR      R1,[R0, #+40]
     26              LPLD_FTM_PWM_ChangeDuty(srv->FTMn,srv->FTM_Chn,srv->duty);
   \                     ??servo__set_duty_1: (+1)
   \   00000064   0x....             LDR.N    R0,??DataTable4
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x6A82             LDR      R2,[R0, #+40]
   \   0000006A   0x....             LDR.N    R0,??DataTable4
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x7901             LDRB     R1,[R0, #+4]
   \   00000070   0x....             LDR.N    R0,??DataTable4
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     27          }
   \   0000007A   0xBD01             POP      {R0,PC}          ;; return
     28          
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void servo__set_radius_dir(float radius,int dir){
   \                     servo__set_radius_dir: (+1)
   \   00000000   0xE92D 0x4370      PUSH     {R4-R6,R8,R9,LR}
   \   00000004   0x0002             MOVS     R2,R0
   \   00000006   0x000E             MOVS     R6,R1
     31            if(dir==0){
   \   00000008   0x2E00             CMP      R6,#+0
   \   0000000A   0xD125             BNE.N    ??servo__set_radius_dir_0
     32              srv->duty=(servo__radius2duty_left(srv,radius)); //dir=0 left
   \   0000000C   0x....             LDR.N    R0,??DataTable4
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x6940             LDR      R0,[R0, #+20]
   \   00000012   0x0011             MOVS     R1,R2
   \   00000014   0x.... 0x....      BL       __aeabi_fdiv
   \   00000018   0x.... 0x....      BL       __aeabi_f2d
   \   0000001C   0x.... 0x....      BL       atan
   \   00000020   0x0004             MOVS     R4,R0
   \   00000022   0x000D             MOVS     R5,R1
   \   00000024   0x....             LDR.N    R0,??DataTable4
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x6980             LDR      R0,[R0, #+24]
   \   0000002A   0x.... 0x....      BL       __aeabi_f2d
   \   0000002E   0x4680             MOV      R8,R0
   \   00000030   0x4689             MOV      R9,R1
   \   00000032   0x....             LDR.N    R0,??DataTable4
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x69C0             LDR      R0,[R0, #+28]
   \   00000038   0x.... 0x....      BL       __aeabi_f2d
   \   0000003C   0x0022             MOVS     R2,R4
   \   0000003E   0x002B             MOVS     R3,R5
   \   00000040   0x.... 0x....      BL       __aeabi_dmul
   \   00000044   0x4642             MOV      R2,R8
   \   00000046   0x464B             MOV      R3,R9
   \   00000048   0x.... 0x....      BL       __aeabi_dadd
   \   0000004C   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000050   0x....             LDR.N    R1,??DataTable4
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x6288             STR      R0,[R1, #+40]
   \   00000056   0xE024             B.N      ??servo__set_radius_dir_1
     33            }
     34            else srv->duty=(servo__radius2duty_right(srv,radius)); //dir=1 right
   \                     ??servo__set_radius_dir_0: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable4
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x6940             LDR      R0,[R0, #+20]
   \   0000005E   0x0011             MOVS     R1,R2
   \   00000060   0x.... 0x....      BL       __aeabi_fdiv
   \   00000064   0x.... 0x....      BL       __aeabi_f2d
   \   00000068   0x.... 0x....      BL       atan
   \   0000006C   0x0004             MOVS     R4,R0
   \   0000006E   0x000D             MOVS     R5,R1
   \   00000070   0x....             LDR.N    R0,??DataTable4
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x6A00             LDR      R0,[R0, #+32]
   \   00000076   0x.... 0x....      BL       __aeabi_f2d
   \   0000007A   0x4680             MOV      R8,R0
   \   0000007C   0x4689             MOV      R9,R1
   \   0000007E   0x....             LDR.N    R0,??DataTable4
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x6A40             LDR      R0,[R0, #+36]
   \   00000084   0x.... 0x....      BL       __aeabi_f2d
   \   00000088   0x0022             MOVS     R2,R4
   \   0000008A   0x002B             MOVS     R3,R5
   \   0000008C   0x.... 0x....      BL       __aeabi_dmul
   \   00000090   0x4642             MOV      R2,R8
   \   00000092   0x464B             MOV      R3,R9
   \   00000094   0x.... 0x....      BL       __aeabi_dadd
   \   00000098   0x.... 0x....      BL       __aeabi_d2uiz
   \   0000009C   0x....             LDR.N    R1,??DataTable4
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x6288             STR      R0,[R1, #+40]
     35            if(srv->duty>(srv->median+srv->amplitude))  srv->duty=srv->median+srv->amplitude;
   \                     ??servo__set_radius_dir_1: (+1)
   \   000000A2   0x....             LDR.N    R0,??DataTable4
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x68C1             LDR      R1,[R0, #+12]
   \   000000A8   0x....             LDR.N    R0,??DataTable4
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x6900             LDR      R0,[R0, #+16]
   \   000000AE   0x1841             ADDS     R1,R0,R1
   \   000000B0   0x....             LDR.N    R0,??DataTable4
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x6A80             LDR      R0,[R0, #+40]
   \   000000B6   0x4281             CMP      R1,R0
   \   000000B8   0xD20A             BCS.N    ??servo__set_radius_dir_2
   \   000000BA   0x....             LDR.N    R0,??DataTable4
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0x68C1             LDR      R1,[R0, #+12]
   \   000000C0   0x....             LDR.N    R0,??DataTable4
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x6900             LDR      R0,[R0, #+16]
   \   000000C6   0x1841             ADDS     R1,R0,R1
   \   000000C8   0x....             LDR.N    R0,??DataTable4
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x6281             STR      R1,[R0, #+40]
   \   000000CE   0xE015             B.N      ??servo__set_radius_dir_3
     36            else if (srv->duty<(srv->median-srv->amplitude))  srv->duty=srv->median-srv->amplitude;
   \                     ??servo__set_radius_dir_2: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable4
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0x6A81             LDR      R1,[R0, #+40]
   \   000000D6   0x....             LDR.N    R0,??DataTable4
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x68C2             LDR      R2,[R0, #+12]
   \   000000DC   0x....             LDR.N    R0,??DataTable4
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x6900             LDR      R0,[R0, #+16]
   \   000000E2   0x1A12             SUBS     R2,R2,R0
   \   000000E4   0x4291             CMP      R1,R2
   \   000000E6   0xD209             BCS.N    ??servo__set_radius_dir_3
   \   000000E8   0x....             LDR.N    R0,??DataTable4
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x68C1             LDR      R1,[R0, #+12]
   \   000000EE   0x....             LDR.N    R0,??DataTable4
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0x6900             LDR      R0,[R0, #+16]
   \   000000F4   0x1A09             SUBS     R1,R1,R0
   \   000000F6   0x....             LDR.N    R0,??DataTable4
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x6281             STR      R1,[R0, #+40]
     37            LPLD_FTM_PWM_ChangeDuty(srv->FTMn, srv->FTM_Chn, srv->duty);
   \                     ??servo__set_radius_dir_3: (+1)
   \   000000FC   0x....             LDR.N    R0,??DataTable4
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x6A82             LDR      R2,[R0, #+40]
   \   00000102   0x....             LDR.N    R0,??DataTable4
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x7901             LDRB     R1,[R0, #+4]
   \   00000108   0x....             LDR.N    R0,??DataTable4
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     38            srv->dir=dir;
   \   00000112   0x....             LDR.N    R0,??DataTable4
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0x62C6             STR      R6,[R0, #+44]
     39          }
   \   00000118   0xE8BD 0x8370      POP      {R4-R6,R8,R9,PC}  ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          uint32 servo__get_duty(){
     42              return srv->duty;
   \                     servo__get_duty: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6A80             LDR      R0,[R0, #+40]
   \   00000006   0x4770             BX       LR               ;; return
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          float servo__get_radius(){
   \                     servo__get_radius: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     46            if(srv->dir==0){
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6AC0             LDR      R0,[R0, #+44]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD120             BNE.N    ??servo__get_radius_0
     47              return servo__duty2radius_left(srv, srv->duty); //dir=0 left
   \   0000000C   0x....             LDR.N    R0,??DataTable4
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x6A80             LDR      R0,[R0, #+40]
   \   00000012   0x.... 0x....      BL       __aeabi_ui2f
   \   00000016   0x....             LDR.N    R1,??DataTable4
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0x6989             LDR      R1,[R1, #+24]
   \   0000001C   0x.... 0x....      BL       __aeabi_fsub
   \   00000020   0x....             LDR.N    R1,??DataTable4
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0x69C9             LDR      R1,[R1, #+28]
   \   00000026   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002A   0x.... 0x....      BL       __aeabi_f2d
   \   0000002E   0x.... 0x....      BL       tan
   \   00000032   0x0004             MOVS     R4,R0
   \   00000034   0x000D             MOVS     R5,R1
   \   00000036   0x....             LDR.N    R0,??DataTable4
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x6940             LDR      R0,[R0, #+20]
   \   0000003C   0x.... 0x....      BL       __aeabi_f2d
   \   00000040   0x0022             MOVS     R2,R4
   \   00000042   0x002B             MOVS     R3,R5
   \   00000044   0x.... 0x....      BL       __aeabi_ddiv
   \   00000048   0x.... 0x....      BL       __aeabi_d2f
   \   0000004C   0xE026             B.N      ??servo__get_radius_1
     48            }
     49            else if (srv->dir==1) return servo__duty2radius_right(srv, srv->duty);//dir=1 right
   \                     ??servo__get_radius_0: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable4
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x6AC0             LDR      R0,[R0, #+44]
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD120             BNE.N    ??servo__get_radius_2
   \   00000058   0x....             LDR.N    R0,??DataTable4
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x6A80             LDR      R0,[R0, #+40]
   \   0000005E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000062   0x....             LDR.N    R1,??DataTable4
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x6A09             LDR      R1,[R1, #+32]
   \   00000068   0x.... 0x....      BL       __aeabi_fsub
   \   0000006C   0x....             LDR.N    R1,??DataTable4
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0x6A49             LDR      R1,[R1, #+36]
   \   00000072   0x.... 0x....      BL       __aeabi_fdiv
   \   00000076   0x.... 0x....      BL       __aeabi_f2d
   \   0000007A   0x.... 0x....      BL       tan
   \   0000007E   0x0004             MOVS     R4,R0
   \   00000080   0x000D             MOVS     R5,R1
   \   00000082   0x....             LDR.N    R0,??DataTable4
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x6940             LDR      R0,[R0, #+20]
   \   00000088   0x.... 0x....      BL       __aeabi_f2d
   \   0000008C   0x0022             MOVS     R2,R4
   \   0000008E   0x002B             MOVS     R3,R5
   \   00000090   0x.... 0x....      BL       __aeabi_ddiv
   \   00000094   0x.... 0x....      BL       __aeabi_d2f
   \   00000098   0xE000             B.N      ??servo__get_radius_1
     50            else return 0;
   \                     ??servo__get_radius_2: (+1)
   \   0000009A   0x2000             MOVS     R0,#+0
   \                     ??servo__get_radius_1: (+1)
   \   0000009C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     51          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     srv

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   servo__config
        48   -> LPLD_FTM_Init
        48   -> LPLD_FTM_PWM_Enable
        48   -> __aeabi_memclr4
        64   -> __aeabi_memcpy4
       0   servo__get_duty
      16   servo__get_radius
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_f2d
        16   -> __aeabi_fdiv
        16   -> __aeabi_fsub
        16   -> __aeabi_ui2f
        16   -> tan
       8   servo__set_duty
         8   -> LPLD_FTM_PWM_ChangeDuty
      24   servo__set_radius_dir
        24   -> LPLD_FTM_PWM_ChangeDuty
        24   -> __aeabi_d2uiz
        24   -> __aeabi_dadd
        24   -> __aeabi_dmul
        24   -> __aeabi_f2d
        24   -> __aeabi_fdiv
        24   -> atan


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      28  ?_0
     112  servo__config
       8  servo__get_duty
     158  servo__get_radius
     124  servo__set_duty
     284  servo__set_radius_dir
       4  srv

 
   4 bytes in section .bss
  28 bytes in section .rodata
 690 bytes in section .text
 
 690 bytes of CODE  memory
  28 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 2
