###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       30/Dec/2017  19:25:56
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\19071_000\Desktop\K60_Car\lib\peripheral\motor.c
#    Command line =  
#        -f C:\Users\19071_~1\AppData\Local\Temp\EWEB48.tmp
#        (C:\Users\19071_000\Desktop\K60_Car\lib\peripheral\motor.c -D LPLD_K60
#        -D USE_K60DZ10 -lCN
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -lB
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -o
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\app\ -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\class\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\peripheral\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List\motor.lst
#    Object file  =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj\motor.o
#
###############################################################################

C:\Users\19071_000\Desktop\K60_Car\lib\peripheral\motor.c
      1          #include "motor.h"
      2          #include <math.h>
      3          

   \                                 In section .bss, align 4
      4          static motor_controller_t *mtrctrl;
   \                     mtrctrl:
   \   00000000                      DS8 4
      5          

   \                                 In section .bss, align 4
      6          static uint32 average_num=0;
   \                     average_num:
   \   00000000                      DS8 4
      7          
      8          
      9          /*
     10          static void motor_controller__toggle_encoder(void){
     11              LPTMR0->CSR &= ~(LPTMR_CSR_TEN_MASK); // disable lptmr
     12              LPTMR0->CSR ^= LPTMR_CSR_TPS(3); // toggle between 0b01 and 0b10
     13              LPTMR0->CSR |= LPTMR_CSR_TEN_MASK; // enable lptmr
     14          }
     15          */
     16          

   \                                 In section .text, align 2, keep-with-next
     17          static void pit_motor_controller(void){
   \                     pit_motor_controller: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     18              static uint32 pit_enter_counter;/* 进入此PIT中断次数计数器 */
     19              static uint16 placc_temp_value[2];
     20              static uint32 srv_duty;
     21          
     22              // 暂存 LPTMR 累加器的值并切换左右轮 LPTMR 的输入信号
     23              do{// 需要连续两次相同的读数才能保证读出正确，参见 K60 手册 41.4.5 节
     24                  placc_temp_value[0] = LPLD_LPTMR_GetPulseAcc();
   \                     ??pit_motor_controller_0: (+1)
   \   00000002   0x.... 0x....      BL       LPLD_LPTMR_GetPulseAcc
   \   00000006   0x....             LDR.N    R1,??DataTable4
   \   00000008   0x8008             STRH     R0,[R1, #+0]
     25                  placc_temp_value[1] = LPLD_LPTMR_GetPulseAcc();
   \   0000000A   0x.... 0x....      BL       LPLD_LPTMR_GetPulseAcc
   \   0000000E   0x....             LDR.N    R1,??DataTable4
   \   00000010   0x8048             STRH     R0,[R1, #+2]
     26              }while(abs_diff(placc_temp_value[0], placc_temp_value[1])>1);
   \   00000012   0x....             LDR.N    R0,??DataTable4
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x....             LDR.N    R1,??DataTable4
   \   00000018   0x8849             LDRH     R1,[R1, #+2]
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD305             BCC.N    ??pit_motor_controller_1
   \   0000001E   0x....             LDR.N    R0,??DataTable4
   \   00000020   0x8801             LDRH     R1,[R0, #+0]
   \   00000022   0x....             LDR.N    R0,??DataTable4
   \   00000024   0x8840             LDRH     R0,[R0, #+2]
   \   00000026   0x1A08             SUBS     R0,R1,R0
   \   00000028   0xE004             B.N      ??pit_motor_controller_2
   \                     ??pit_motor_controller_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable4
   \   0000002C   0x8841             LDRH     R1,[R0, #+2]
   \   0000002E   0x....             LDR.N    R0,??DataTable4
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0x1A08             SUBS     R0,R1,R0
   \                     ??pit_motor_controller_2: (+1)
   \   00000034   0x2802             CMP      R0,#+2
   \   00000036   0xDAE4             BGE.N    ??pit_motor_controller_0
     27              
     28              //motor_controller__toggle_encoder();
     29              
     30              // 更新光编的测量值
     31              switch(0){
     32              case 0:
     33                  mtrctrl->ecdlft.placc_value = placc_temp_value[1];// 读取暂存的累加值，代表左轮在一次PIT周期中转过的脉冲数
   \   00000038   0x....             LDR.N    R0,??DataTable4
   \   0000003A   0x8840             LDRH     R0,[R0, #+2]
   \   0000003C   0x....             LDR.N    R1,??DataTable4_1
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0xF8A1 0x0078      STRH     R0,[R1, #+120]
     34                  mtrctrl->ecdlft.signed_value =mtrctrl->ecdlft.placc_value;
   \   00000044   0x....             LDR.N    R0,??DataTable4_1
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF9B0 0x0078      LDRSH    R0,[R0, #+120]
   \   0000004C   0x....             LDR.N    R1,??DataTable4_1
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xF8A1 0x007A      STRH     R0,[R1, #+122]
     35                  break;
     36              case 1:
     37                  mtrctrl->ecdrgt.placc_value = placc_temp_value[1];// 读取暂存的累加值，代表右轮在一次PIT周期中转过的脉冲数
     38                  mtrctrl->ecdrgt.signed_value = mtrctrl->ecdlft.placc_value;
     39                  break;
     40              }
     41              
     42              
     43              mtrctrl->ecdlft.mileage += mtrctrl->ecdlft.signed_value;
   \   00000054   0x....             LDR.N    R0,??DataTable4_1
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF9B0 0x007A      LDRSH    R0,[R0, #+122]
   \   0000005C   0x....             LDR.N    R1,??DataTable4_1
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0x6FC9             LDR      R1,[R1, #+124]
   \   00000062   0xFA01 0xF080      SXTAH    R0,R1,R0
   \   00000066   0x....             LDR.N    R1,??DataTable4_1
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0x67C8             STR      R0,[R1, #+124]
     44              mtrctrl->ecdrgt.mileage += mtrctrl->ecdrgt.signed_value;
   \   0000006C   0x....             LDR.N    R0,??DataTable4_1
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF9B0 0x0082      LDRSH    R0,[R0, #+130]
   \   00000074   0x....             LDR.N    R1,??DataTable4_1
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0xF8D1 0x1084      LDR      R1,[R1, #+132]
   \   0000007C   0xFA01 0xF080      SXTAH    R0,R1,R0
   \   00000080   0x....             LDR.N    R1,??DataTable4_1
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0xF8C1 0x0084      STR      R0,[R1, #+132]
     45          
     46          
     47              average_num= mtrctrl->ecdlft.mileage;
   \   00000088   0x....             LDR.N    R0,??DataTable4_1
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x6FC0             LDR      R0,[R0, #+124]
   \   0000008E   0x....             LDR.N    R1,??DataTable4_2
   \   00000090   0x6008             STR      R0,[R1, #+0]
     48              pit_enter_counter++;
   \   00000092   0x....             LDR.N    R0,??DataTable4_3
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0x....             LDR.N    R1,??DataTable4_3
   \   0000009A   0x6008             STR      R0,[R1, #+0]
     49              
     50              
     51              /////////////////////////////////////////////////////////////////////单光编counter清零
     52               LPTMR0->CSR&=(~LPTMR_CSR_TEN_MASK); 
   \   0000009C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40040000
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x0840             LSRS     R0,R0,#+1
   \   000000A2   0x0040             LSLS     R0,R0,#+1
   \   000000A4   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40040000
   \   000000A6   0x6008             STR      R0,[R1, #+0]
     53               LPTMR0->CSR |= LPTMR_CSR_TEN_MASK;
   \   000000A8   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40040000
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000B0   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40040000
   \   000000B2   0x6008             STR      R0,[R1, #+0]
     54              //if(pit_enter_counter>=300){
     55              //    average_num=mtrctrl->ecdlft.mileage/pit_enter_counter;
     56                  //motor_controller__set_duty(LEFT_MOTOR, (int32)(0));
     57                  //motor_controller__set_duty(RIGHT_MOTOR, (int32)(0));
     58              //    motor_controller__disable();
     59              //}
     60          }
   \   000000B4   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `pit_motor_controller::pit_enter_counter`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     `pit_motor_controller::placc_temp_value`:
   \   00000000                      DS8 4
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void motor_controller__config(motor_controller_t * mtrctrl_usr){
   \                     motor_controller__config: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     63              int8 i;
     64              mtrctrl = mtrctrl_usr;
   \   00000002   0x....             LDR.N    R1,??DataTable4_1
   \   00000004   0x6008             STR      R0,[R1, #+0]
     65              // PIT 周期中断初始化
     66              memset(&(mtrctrl->_pit_init), 0, sizeof(PIT_InitTypeDef));
   \   00000006   0x2214             MOVS     R2,#+20
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R0,??DataTable4_1
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x303C             ADDS     R0,R0,#+60
   \   00000010   0x.... 0x....      BL       memset
     67              mtrctrl->_pit_init.PIT_Pitx = mtrctrl->pit;
   \   00000014   0x....             LDR.N    R0,??DataTable4_1
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable4_1
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF881 0x003C      STRB     R0,[R1, #+60]
     68              mtrctrl->_pit_init.PIT_PeriodMs = mtrctrl->period_ms;
   \   00000022   0x....             LDR.N    R0,??DataTable4_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x....             LDR.N    R1,??DataTable4_1
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x6448             STR      R0,[R1, #+68]
     69              mtrctrl->_pit_init.PIT_Isr = pit_motor_controller;
   \   0000002E   0x....             LDR.N    R0,??DataTable4_5
   \   00000030   0x....             LDR.N    R1,??DataTable4_1
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x64C8             STR      R0,[R1, #+76]
     70              LPLD_PIT_Init(mtrctrl->_pit_init);
   \   00000036   0x....             LDR.N    R0,??DataTable4_1
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF110 0x013C      ADDS     R1,R0,#+60
   \   0000003E   0xB084             SUB      SP,SP,#+16
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x2214             MOVS     R2,#+20
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000048   0xBC0F             POP      {R0-R3}
   \   0000004A   0x.... 0x....      BL       LPLD_PIT_Init
     71              // LPTMR 初始化，从左轮先开始
     72              memset(&(mtrctrl->_lptmr_init), 0, sizeof(LPTMR_InitTypeDef));
   \   0000004E   0x220C             MOVS     R2,#+12
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x....             LDR.N    R0,??DataTable4_1
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x3050             ADDS     R0,R0,#+80
   \   00000058   0x.... 0x....      BL       memset
     73              mtrctrl->_lptmr_init.LPTMR_Mode = LPTMR_MODE_PLACC;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x....             LDR.N    R1,??DataTable4_1
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0xF881 0x0050      STRB     R0,[R1, #+80]
     74              mtrctrl->_lptmr_init.LPTMR_PluseAccInput = mtrctrl->ecdcfg_rgt.LPTMR_ALTn;
   \   00000066   0x....             LDR.N    R0,??DataTable4_1
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x7A40             LDRB     R0,[R0, #+9]
   \   0000006C   0x....             LDR.N    R1,??DataTable4_1
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0xF881 0x0054      STRB     R0,[R1, #+84]
     75              LPLD_LPTMR_Init(mtrctrl->_lptmr_init);
   \   00000074   0x....             LDR.N    R0,??DataTable4_1
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x3050             ADDS     R0,R0,#+80
   \   0000007A   0xC807             LDM      R0,{R0-R2}
   \   0000007C   0x.... 0x....      BL       LPLD_LPTMR_Init
     76              mtrctrl->_lptmr_init.LPTMR_PluseAccInput = mtrctrl->ecdcfg_lft.LPTMR_ALTn;
   \   00000080   0x....             LDR.N    R0,??DataTable4_1
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x7A00             LDRB     R0,[R0, #+8]
   \   00000086   0x....             LDR.N    R1,??DataTable4_1
   \   00000088   0x6809             LDR      R1,[R1, #+0]
   \   0000008A   0xF881 0x0054      STRB     R0,[R1, #+84]
     77              LPLD_LPTMR_Init(mtrctrl->_lptmr_init);
   \   0000008E   0x....             LDR.N    R0,??DataTable4_1
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x3050             ADDS     R0,R0,#+80
   \   00000094   0xC807             LDM      R0,{R0-R2}
   \   00000096   0x.... 0x....      BL       LPLD_LPTMR_Init
     78              // 编码器里程计清零
     79              mtrctrl->ecdlft.mileage = 0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x....             LDR.N    R1,??DataTable4_1
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x67C8             STR      R0,[R1, #+124]
     80              mtrctrl->ecdrgt.mileage = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR.N    R1,??DataTable4_1
   \   000000A6   0x6809             LDR      R1,[R1, #+0]
   \   000000A8   0xF8C1 0x0084      STR      R0,[R1, #+132]
     81              // 电机驱动 FTM 初始化
     82              memset(&(mtrctrl->_mtr_init), 0, sizeof(FTM_InitTypeDef));
   \   000000AC   0x221C             MOVS     R2,#+28
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x....             LDR.N    R0,??DataTable4_1
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x305C             ADDS     R0,R0,#+92
   \   000000B6   0x.... 0x....      BL       memset
     83              for(i=0; i<MTR_LEN; i++){
   \   000000BA   0x2400             MOVS     R4,#+0
   \   000000BC   0xE044             B.N      ??motor_controller__config_0
     84                  mtrctrl->_mtr_init.FTM_Ftmx = mtrctrl->mtrcfg[i].FTMn;
   \                     ??motor_controller__config_1: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable4_1
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000C4   0x210C             MOVS     R1,#+12
   \   000000C6   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   000000CA   0x4408             ADD      R0,R0,R1
   \   000000CC   0x68C0             LDR      R0,[R0, #+12]
   \   000000CE   0x....             LDR.N    R1,??DataTable4_1
   \   000000D0   0x6809             LDR      R1,[R1, #+0]
   \   000000D2   0x65C8             STR      R0,[R1, #+92]
     85                  mtrctrl->_mtr_init.FTM_Mode = FTM_MODE_PWM; //使能PWM模式
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x....             LDR.N    R1,??DataTable4_1
   \   000000D8   0x6809             LDR      R1,[R1, #+0]
   \   000000DA   0xF881 0x0060      STRB     R0,[R1, #+96]
     86                  mtrctrl->_mtr_init.FTM_PwmFreq = mtrctrl->mtrcfg[i].freq;
   \   000000DE   0x....             LDR.N    R0,??DataTable4_1
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000E4   0x210C             MOVS     R1,#+12
   \   000000E6   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   000000EA   0x4408             ADD      R0,R0,R1
   \   000000EC   0x6940             LDR      R0,[R0, #+20]
   \   000000EE   0x....             LDR.N    R1,??DataTable4_1
   \   000000F0   0x6809             LDR      R1,[R1, #+0]
   \   000000F2   0x6648             STR      R0,[R1, #+100]
     87                  LPLD_FTM_Init(mtrctrl->_mtr_init);
   \   000000F4   0x....             LDR.N    R0,??DataTable4_1
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF110 0x015C      ADDS     R1,R0,#+92
   \   000000FC   0xB084             SUB      SP,SP,#+16
   \   000000FE   0x4668             MOV      R0,SP
   \   00000100   0x221C             MOVS     R2,#+28
   \   00000102   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000106   0xBC0F             POP      {R0-R3}
   \   00000108   0x.... 0x....      BL       LPLD_FTM_Init
     88                  LPLD_FTM_PWM_Enable(mtrctrl->mtrcfg[i].FTMn,
     89                                      mtrctrl->mtrcfg[i].FTM_Chn,
     90                                      0, //初始化电机输出占空比为零
     91                                      mtrctrl->mtrcfg[i].PTXn,
     92                                      ALIGN_LEFT //脉宽左对齐
     93                                      );
   \   0000010C   0x2028             MOVS     R0,#+40
   \   0000010E   0x9000             STR      R0,[SP, #+0]
   \   00000110   0x....             LDR.N    R0,??DataTable4_1
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000116   0x210C             MOVS     R1,#+12
   \   00000118   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   0000011C   0x4408             ADD      R0,R0,R1
   \   0000011E   0x7C43             LDRB     R3,[R0, #+17]
   \   00000120   0x2200             MOVS     R2,#+0
   \   00000122   0x....             LDR.N    R0,??DataTable4_1
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000128   0x210C             MOVS     R1,#+12
   \   0000012A   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   0000012E   0x4408             ADD      R0,R0,R1
   \   00000130   0x7C01             LDRB     R1,[R0, #+16]
   \   00000132   0x....             LDR.N    R0,??DataTable4_1
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000138   0x250C             MOVS     R5,#+12
   \   0000013A   0xFB14 0xF505      SMULBB   R5,R4,R5
   \   0000013E   0x4428             ADD      R0,R0,R5
   \   00000140   0x68C0             LDR      R0,[R0, #+12]
   \   00000142   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     94              }
   \   00000146   0x1C64             ADDS     R4,R4,#+1
   \                     ??motor_controller__config_0: (+1)
   \   00000148   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000014A   0x2C04             CMP      R4,#+4
   \   0000014C   0xDBB7             BLT.N    ??motor_controller__config_1
     95          }
   \   0000014E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
     96          

   \                                 In section .text, align 2, keep-with-next
     97          void motor_controller__set_duty(motor_select_t sel, int32 duty){
   \                     motor_controller__set_duty: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000E             MOVS     R6,R1
     98              mtr_ch_t chp, ch0;
     99          
    100              switch(sel){
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD002             BEQ.N    ??motor_controller__set_duty_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD008             BEQ.N    ??motor_controller__set_duty_1
   \   0000000E   0xE00F             B.N      ??motor_controller__set_duty_2
    101              case LEFT_MOTOR:
    102                  if(duty>=0){
   \                     ??motor_controller__set_duty_0: (+1)
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD402             BMI.N    ??motor_controller__set_duty_3
    103                      chp = MTR_LF;
   \   00000014   0x2500             MOVS     R5,#+0
    104                      ch0 = MTR_LR;
   \   00000016   0x2401             MOVS     R4,#+1
   \   00000018   0xE001             B.N      ??motor_controller__set_duty_4
    105                  }else{
    106                      chp = MTR_LR;
   \                     ??motor_controller__set_duty_3: (+1)
   \   0000001A   0x2501             MOVS     R5,#+1
    107                      ch0 = MTR_LF;
   \   0000001C   0x2400             MOVS     R4,#+0
    108                  }
    109                  break;
   \                     ??motor_controller__set_duty_4: (+1)
   \   0000001E   0xE00B             B.N      ??motor_controller__set_duty_5
    110              case RIGHT_MOTOR:
    111                  if(duty>=0){
   \                     ??motor_controller__set_duty_1: (+1)
   \   00000020   0x2E00             CMP      R6,#+0
   \   00000022   0xD402             BMI.N    ??motor_controller__set_duty_6
    112                      chp = MTR_RF;
   \   00000024   0x2502             MOVS     R5,#+2
    113                      ch0 = MTR_RR;
   \   00000026   0x2403             MOVS     R4,#+3
   \   00000028   0xE001             B.N      ??motor_controller__set_duty_7
    114                  }else{
    115                      chp = MTR_RR;
   \                     ??motor_controller__set_duty_6: (+1)
   \   0000002A   0x2503             MOVS     R5,#+3
    116                      ch0 = MTR_RF;
   \   0000002C   0x2402             MOVS     R4,#+2
    117                  }
    118                  break;
   \                     ??motor_controller__set_duty_7: (+1)
   \   0000002E   0xE003             B.N      ??motor_controller__set_duty_5
    119              default:
    120                  ASSERT(0);
   \                     ??motor_controller__set_duty_2: (+1)
   \   00000030   0x2178             MOVS     R1,#+120
   \   00000032   0x....             LDR.N    R0,??DataTable4_6
   \   00000034   0x.... 0x....      BL       assert_failed
    121              }
    122          
    123              if(duty<0) duty = -duty;
   \                     ??motor_controller__set_duty_5: (+1)
   \   00000038   0x2E00             CMP      R6,#+0
   \   0000003A   0xD500             BPL.N    ??motor_controller__set_duty_8
   \   0000003C   0x4276             RSBS     R6,R6,#+0
    124          
    125              LPLD_FTM_PWM_ChangeDuty(mtrctrl->mtrcfg[chp].FTMn, mtrctrl->mtrcfg[chp].FTM_Chn, duty);
   \                     ??motor_controller__set_duty_8: (+1)
   \   0000003E   0x0032             MOVS     R2,R6
   \   00000040   0x....             LDR.N    R0,??DataTable4_1
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x210C             MOVS     R1,#+12
   \   00000048   0xFB01 0xF105      MUL      R1,R1,R5
   \   0000004C   0x4408             ADD      R0,R0,R1
   \   0000004E   0x7C01             LDRB     R1,[R0, #+16]
   \   00000050   0x....             LDR.N    R0,??DataTable4_1
   \   00000052   0x6803             LDR      R3,[R0, #+0]
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x200C             MOVS     R0,#+12
   \   00000058   0x4345             MULS     R5,R0,R5
   \   0000005A   0xEB03 0x0005      ADD      R0,R3,R5
   \   0000005E   0x68C0             LDR      R0,[R0, #+12]
   \   00000060   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    126              LPLD_FTM_PWM_ChangeDuty(mtrctrl->mtrcfg[ch0].FTMn, mtrctrl->mtrcfg[ch0].FTM_Chn, 0);
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x....             LDR.N    R0,??DataTable4_1
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x210C             MOVS     R1,#+12
   \   0000006E   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000072   0x4408             ADD      R0,R0,R1
   \   00000074   0x7C01             LDRB     R1,[R0, #+16]
   \   00000076   0x....             LDR.N    R0,??DataTable4_1
   \   00000078   0x6803             LDR      R3,[R0, #+0]
   \   0000007A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007C   0x200C             MOVS     R0,#+12
   \   0000007E   0x4344             MULS     R4,R0,R4
   \   00000080   0xEB03 0x0004      ADD      R0,R3,R4
   \   00000084   0x68C0             LDR      R0,[R0, #+12]
   \   00000086   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    127          }
   \   0000008A   0xBD70             POP      {R4-R6,PC}       ;; return
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void motor_controller__enable(){
   \                     motor_controller__enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    130              LPLD_PIT_EnableIrq(mtrctrl->_pit_init);
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF110 0x013C      ADDS     R1,R0,#+60
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x2214             MOVS     R2,#+20
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000014   0xBC0F             POP      {R0-R3}
   \   00000016   0x.... 0x....      BL       LPLD_PIT_EnableIrq
    131          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    132          

   \                                 In section .text, align 2, keep-with-next
    133          void motor_controller__disable(){
   \                     motor_controller__disable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    134              LPLD_PIT_DisableIrq(mtrctrl->_pit_init);
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF110 0x013C      ADDS     R1,R0,#+60
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x2214             MOVS     R2,#+20
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000014   0xBC0F             POP      {R0-R3}
   \   00000016   0x.... 0x....      BL       LPLD_PIT_DisableIrq
    135          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `pit_motor_controller::placc_temp_value`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     mtrctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     average_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `pit_motor_controller::pit_enter_counter`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     pit_motor_controller

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x31          DC8 5CH, 31H, 39H, 30H, 37H, 31H, 5FH, 30H
   \              0x39 0x30    
   \              0x37 0x31    
   \              0x5F 0x30    
   \   00000010   0x30 0x30          DC8 30H, 30H, 5CH, 44H, 65H, 73H, 6BH, 74H
   \              0x5C 0x44    
   \              0x65 0x73    
   \              0x6B 0x74    
   \   00000018   0x6F 0x70          DC8 6FH, 70H, 5CH, 4BH, 36H, 30H, 5FH, 43H
   \              0x5C 0x4B    
   \              0x36 0x30    
   \              0x5F 0x43    
   \   00000020   0x61 0x72          DC8 61H, 72H, 5CH, 6CH, 69H, 62H, 5CH, 70H
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x70    
   \   00000028   0x65 0x72          DC8 65H, 72H, 69H, 70H, 68H, 65H, 72H, 61H
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x61    
   \   00000030   0x6C 0x5C          DC8 6CH, 5CH, 6DH, 6FH, 74H, 6FH, 72H, 2EH
   \              0x6D 0x6F    
   \              0x74 0x6F    
   \              0x72 0x2E    
   \   00000038   0x63 0x00          DC8 63H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   motor_controller__config
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_PWM_Enable
        24   -> LPLD_LPTMR_Init
        24   -> LPLD_PIT_Init
        40   -> __aeabi_memcpy4
        24   -> memset
      24   motor_controller__disable
         8   -> LPLD_PIT_DisableIrq
        24   -> __aeabi_memcpy4
      24   motor_controller__enable
         8   -> LPLD_PIT_EnableIrq
        24   -> __aeabi_memcpy4
      16   motor_controller__set_duty
        16   -> LPLD_FTM_PWM_ChangeDuty
        16   -> assert_failed
       8   pit_motor_controller
         8   -> LPLD_LPTMR_GetPulseAcc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      60  ?_0
       4  average_num
     336  motor_controller__config
      28  motor_controller__disable
      28  motor_controller__enable
     140  motor_controller__set_duty
       4  mtrctrl
       4  pit_enter_counter
     182  pit_motor_controller
       4  placc_temp_value

 
  16 bytes in section .bss
  60 bytes in section .rodata
 742 bytes in section .text
 
 742 bytes of CODE  memory
  60 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: 4
