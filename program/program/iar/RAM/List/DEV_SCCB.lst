###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       30/Dec/2017  19:25:52
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\19071_000\Desktop\K60_Car\lib\LPLD\DEV\DEV_SCCB.c
#    Command line =  
#        -f C:\Users\19071_~1\AppData\Local\Temp\EWDBBD.tmp
#        (C:\Users\19071_000\Desktop\K60_Car\lib\LPLD\DEV\DEV_SCCB.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -lB
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -o
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\app\ -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\class\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\peripheral\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List\DEV_SCCB.lst
#    Object file  =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj\DEV_SCCB.o
#
###############################################################################

C:\Users\19071_000\Desktop\K60_Car\lib\LPLD\DEV\DEV_SCCB.c
      1          /**
      2          * @file DEV_SCCB.c
      3          * @version 0.1[By LPLD]
      4          * @date 2013-09-24
      5          * @brief SCCB设备驱动程序
      6          *
      7          * 更改建议:可根据实际硬件修改
      8          *
      9          * 版权所有:北京拉普兰德电子技术有限公司
     10          * http://www.lpld.cn
     11          * mail:support@lpld.cn
     12          *
     13          * @par
     14          * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15          * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16          * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17          * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18          * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19          * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20          * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21          */
     22          #include "DEV_SCCB.h"
     23          
     24          static uint8 LPLD_SCCB_Start(void);
     25          static void LPLD_SCCB_Stop(void);
     26          static void LPLD_SCCB_Ack(void);
     27          static void LPLD_SCCB_NoAck(void);
     28          static uint8 LPLD_SCCB_WaitAck(void);
     29          static void LPLD_SCCB_SendByte(uint8);
     30          static uint8 LPLD_SCCB_ReceiveByte(void);
     31          static void LPLD_SCCB_Delay(uint16);
     32          
     33          /*
     34           * LPLD_SCCB_Init
     35           * 初始化SCCB所需引脚
     36           */

   \                                 In section .text, align 2, keep-with-next
     37          void LPLD_SCCB_Init(void)
     38          {
   \                     LPLD_SCCB_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     39            GPIO_InitTypeDef ptb;
     40            /********用户可修改值 开始***********/
     41            ptb.GPIO_PTx = PTE;
   \   00000004   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff100
   \   00000006   0x9001             STR      R0,[SP, #+4]
     42            ptb.GPIO_Pins = GPIO_Pin10 | GPIO_Pin12;
   \   00000008   0xF44F 0x50A0      MOV      R0,#+5120
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     43            /********用户可修改值 结束***********/
     44            ptb.GPIO_Dir = DIR_OUTPUT;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0010      STRB     R0,[SP, #+16]
     45            ptb.GPIO_Output = OUTPUT_H;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0011      STRB     R0,[SP, #+17]
     46            ptb.GPIO_PinControl = NULL;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     47            LPLD_GPIO_Init(ptb);
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2214             MOVS     R2,#+20
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_GPIO_Init
     48          }
   \   00000030   0xB007             ADD      SP,SP,#+28
   \   00000032   0xBD00             POP      {PC}             ;; return
     49          
     50          /*
     51           * LPLD_SCCB_WriteReg
     52           * 写SCCB设备寄存器
     53           * 
     54           * 参数:
     55           *    reg_addr--寄存器地址
     56           *    data--待写数据 
     57           *
     58           * 输出:
     59           *    1-成功
     60           *    0-失败
     61           */

   \                                 In section .text, align 2, keep-with-next
     62          uint8 LPLD_SCCB_WriteReg(uint16 reg_addr , uint8 data)
     63          {		
   \                     LPLD_SCCB_WriteReg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     64            if(!LPLD_SCCB_Start())
   \   00000006   0x.... 0x....      BL       LPLD_SCCB_Start
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??LPLD_SCCB_WriteReg_0
     65            {
     66              return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE019             B.N      ??LPLD_SCCB_WriteReg_1
     67            }
     68            LPLD_SCCB_SendByte( SCCB_DEV_ADR );         
   \                     ??LPLD_SCCB_WriteReg_0: (+1)
   \   00000012   0x2042             MOVS     R0,#+66
   \   00000014   0x.... 0x....      BL       LPLD_SCCB_SendByte
     69            if( !LPLD_SCCB_WaitAck() )
   \   00000018   0x.... 0x....      BL       LPLD_SCCB_WaitAck
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD103             BNE.N    ??LPLD_SCCB_WriteReg_2
     70            {
     71              LPLD_SCCB_Stop(); 
   \   00000020   0x.... 0x....      BL       LPLD_SCCB_Stop
     72              return 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE00E             B.N      ??LPLD_SCCB_WriteReg_1
     73            }
     74            LPLD_SCCB_SendByte((uint8)(reg_addr & 0x00FF));   
   \                     ??LPLD_SCCB_WriteReg_2: (+1)
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       LPLD_SCCB_SendByte
     75            LPLD_SCCB_WaitAck();	
   \   00000030   0x.... 0x....      BL       LPLD_SCCB_WaitAck
     76            LPLD_SCCB_SendByte(data);
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       LPLD_SCCB_SendByte
     77            LPLD_SCCB_WaitAck();   
   \   0000003C   0x.... 0x....      BL       LPLD_SCCB_WaitAck
     78            LPLD_SCCB_Stop(); 
   \   00000040   0x.... 0x....      BL       LPLD_SCCB_Stop
     79            return 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SCCB_WriteReg_1: (+1)
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     80          }									 
     81          
     82          
     83          
     84          
     85          /******************************************************************************************************************
     86          * 函数名：SCCB_ReadByte
     87          * 描述  ：读取一串数据
     88          * 输入  ：- data: 存放读出数据 	- length: 待读出长度	- reg_addr: 待读出地址		 - DeviceAddress: 器件类型
     89          * 输出  ：返回为:=1成功读入,=0失败
     90          * 注意  ：无        
     91          **********************************************************************************************************************/ 
     92          /*
     93           * LPLD_SCCB_ReadReg
     94           * 读SCCB设备寄存器
     95           * 
     96           * 参数:
     97           *    reg_addr--寄存器地址
     98           *    *data--待存读出数据地址
     99           *    length--读取长度
    100           *
    101           * 输出:
    102           *    1-成功
    103           *    0-失败
    104           */          

   \                                 In section .text, align 2, keep-with-next
    105          uint8 LPLD_SCCB_ReadReg(uint8 reg_addr, uint8* data, uint16 length)
    106          {	
   \                     LPLD_SCCB_ReadReg: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
    107            if(!LPLD_SCCB_Start())
   \   00000008   0x.... 0x....      BL       LPLD_SCCB_Start
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LPLD_SCCB_ReadReg_0
    108            {
    109              return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE036             B.N      ??LPLD_SCCB_ReadReg_1
    110            }
    111            LPLD_SCCB_SendByte( SCCB_DEV_ADR ); 
   \                     ??LPLD_SCCB_ReadReg_0: (+1)
   \   00000014   0x2042             MOVS     R0,#+66
   \   00000016   0x.... 0x....      BL       LPLD_SCCB_SendByte
    112            if( !LPLD_SCCB_WaitAck() )
   \   0000001A   0x.... 0x....      BL       LPLD_SCCB_WaitAck
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD103             BNE.N    ??LPLD_SCCB_ReadReg_2
    113            {
    114              LPLD_SCCB_Stop(); 
   \   00000022   0x.... 0x....      BL       LPLD_SCCB_Stop
    115              return 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE02B             B.N      ??LPLD_SCCB_ReadReg_1
    116            }
    117            LPLD_SCCB_SendByte( reg_addr ); 
   \                     ??LPLD_SCCB_ReadReg_2: (+1)
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       LPLD_SCCB_SendByte
    118            LPLD_SCCB_WaitAck();	
   \   00000032   0x.... 0x....      BL       LPLD_SCCB_WaitAck
    119            LPLD_SCCB_Stop(); 
   \   00000036   0x.... 0x....      BL       LPLD_SCCB_Stop
    120            
    121            if(!LPLD_SCCB_Start())
   \   0000003A   0x.... 0x....      BL       LPLD_SCCB_Start
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD101             BNE.N    ??LPLD_SCCB_ReadReg_3
    122            {
    123              return 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE01D             B.N      ??LPLD_SCCB_ReadReg_1
    124            }
    125            LPLD_SCCB_SendByte( SCCB_DEV_ADR + 1 ); 
   \                     ??LPLD_SCCB_ReadReg_3: (+1)
   \   00000046   0x2043             MOVS     R0,#+67
   \   00000048   0x.... 0x....      BL       LPLD_SCCB_SendByte
    126            if(!LPLD_SCCB_WaitAck())
   \   0000004C   0x.... 0x....      BL       LPLD_SCCB_WaitAck
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD110             BNE.N    ??LPLD_SCCB_ReadReg_4
    127            {
    128              LPLD_SCCB_Stop(); 
   \   00000054   0x.... 0x....      BL       LPLD_SCCB_Stop
    129              return 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xE012             B.N      ??LPLD_SCCB_ReadReg_1
    130            }
    131            while(length)
    132            {
    133              *data = LPLD_SCCB_ReceiveByte();
    134              if(length == 1)
    135              {
    136                LPLD_SCCB_NoAck();
    137              }
    138              else
    139              {
    140                LPLD_SCCB_Ack(); 
   \                     ??LPLD_SCCB_ReadReg_5: (+1)
   \   0000005C   0x.... 0x....      BL       LPLD_SCCB_Ack
   \   00000060   0xE007             B.N      ??LPLD_SCCB_ReadReg_6
    141              }
   \                     ??LPLD_SCCB_ReadReg_7: (+1)
   \   00000062   0x.... 0x....      BL       LPLD_SCCB_ReceiveByte
   \   00000066   0x7030             STRB     R0,[R6, #+0]
   \   00000068   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000006A   0x2C01             CMP      R4,#+1
   \   0000006C   0xD1F6             BNE.N    ??LPLD_SCCB_ReadReg_5
   \   0000006E   0x.... 0x....      BL       LPLD_SCCB_NoAck
    142              data++;
   \                     ??LPLD_SCCB_ReadReg_6: (+1)
   \   00000072   0x1C76             ADDS     R6,R6,#+1
    143              length--;
   \   00000074   0x1E64             SUBS     R4,R4,#+1
    144            }
   \                     ??LPLD_SCCB_ReadReg_4: (+1)
   \   00000076   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0xD1F2             BNE.N    ??LPLD_SCCB_ReadReg_7
    145            LPLD_SCCB_Stop();
   \                     ??LPLD_SCCB_ReadReg_8: (+1)
   \   0000007C   0x.... 0x....      BL       LPLD_SCCB_Stop
    146            return 1;
   \   00000080   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SCCB_ReadReg_1: (+1)
   \   00000082   0xBD70             POP      {R4-R6,PC}       ;; return
    147          }
    148          
    149          /*
    150           * LPLD_SCCB_Start
    151           * SCCB起始信号，内部调用
    152           */

   \                                 In section .text, align 2, keep-with-next
    153          static uint8 LPLD_SCCB_Start(void)
    154          {
   \                     LPLD_SCCB_Start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    155            SCCB_SDA_O=1;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000006   0x6008             STR      R0,[R1, #+0]
    156            SCCB_SCL=1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    157            SCCB_DELAY();
   \   0000000E   0xF241 0x3088      MOVW     R0,#+5000
   \   00000012   0x.... 0x....      BL       LPLD_SCCB_Delay
    158            
    159            SCCB_SDA_IN();
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    160            if(!SCCB_SDA_I)
   \   0000001C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0a04
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD104             BNE.N    ??LPLD_SCCB_Start_0
    161            {
    162              SCCB_SDA_OUT();	
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000028   0x6008             STR      R0,[R1, #+0]
    163              return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE01C             B.N      ??LPLD_SCCB_Start_1
    164            }
    165            SCCB_SDA_OUT();	
   \                     ??LPLD_SCCB_Start_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000032   0x6008             STR      R0,[R1, #+0]
    166            SCCB_SDA_O=0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000038   0x6008             STR      R0,[R1, #+0]
    167            
    168            SCCB_DELAY();
   \   0000003A   0xF241 0x3088      MOVW     R0,#+5000
   \   0000003E   0x.... 0x....      BL       LPLD_SCCB_Delay
    169            
    170            SCCB_SDA_IN();
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000046   0x6008             STR      R0,[R1, #+0]
    171            if(SCCB_SDA_I) 
   \   00000048   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0a04
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD004             BEQ.N    ??LPLD_SCCB_Start_2
    172            {
    173              SCCB_SDA_OUT();
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000054   0x6008             STR      R0,[R1, #+0]
    174              return 0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xE006             B.N      ??LPLD_SCCB_Start_1
    175            }
    176            SCCB_SDA_OUT();
   \                     ??LPLD_SCCB_Start_2: (+1)
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    177            SCCB_SDA_O=0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000064   0x6008             STR      R0,[R1, #+0]
    178          
    179            return 1;
   \   00000066   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SCCB_Start_1: (+1)
   \   00000068   0xBD02             POP      {R1,PC}          ;; return
    180          }
    181          
    182          /*
    183           * LPLD_SCCB_Stop
    184           * SCCB停止信号，内部调用
    185           */

   \                                 In section .text, align 2, keep-with-next
    186          static void LPLD_SCCB_Stop(void)
    187          {
   \                     LPLD_SCCB_Stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    188            SCCB_SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000006   0x6008             STR      R0,[R1, #+0]
    189            SCCB_SDA_O=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    190            SCCB_DELAY();
   \   0000000E   0xF241 0x3088      MOVW     R0,#+5000
   \   00000012   0x.... 0x....      BL       LPLD_SCCB_Delay
    191            
    192            SCCB_SCL=1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    193            SCCB_SDA_O=1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000020   0x6008             STR      R0,[R1, #+0]
    194            SCCB_DELAY();
   \   00000022   0xF241 0x3088      MOVW     R0,#+5000
   \   00000026   0x.... 0x....      BL       LPLD_SCCB_Delay
    195          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    196          
    197          /*
    198           * LPLD_SCCB_Stop
    199           * SCCB应答信号，内部调用
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          static void LPLD_SCCB_Ack(void)
    202          {	
   \                     LPLD_SCCB_Ack: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    203            SCCB_SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000006   0x6008             STR      R0,[R1, #+0]
    204            SCCB_DELAY();
   \   00000008   0xF241 0x3088      MOVW     R0,#+5000
   \   0000000C   0x.... 0x....      BL       LPLD_SCCB_Delay
    205            
    206            SCCB_SDA_O=0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000014   0x6008             STR      R0,[R1, #+0]
    207            SCCB_DELAY();
   \   00000016   0xF241 0x3088      MOVW     R0,#+5000
   \   0000001A   0x.... 0x....      BL       LPLD_SCCB_Delay
    208            
    209            SCCB_SCL=1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000022   0x6008             STR      R0,[R1, #+0]
    210            SCCB_DELAY();
   \   00000024   0xF241 0x3088      MOVW     R0,#+5000
   \   00000028   0x.... 0x....      BL       LPLD_SCCB_Delay
    211            
    212            SCCB_SCL=0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000030   0x6008             STR      R0,[R1, #+0]
    213            SCCB_DELAY();
   \   00000032   0xF241 0x3088      MOVW     R0,#+5000
   \   00000036   0x.... 0x....      BL       LPLD_SCCB_Delay
    214          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
    215          
    216          /*
    217           * LPLD_SCCB_NoAck
    218           * SCCB无应答信号，内部调用
    219           */

   \                                 In section .text, align 2, keep-with-next
    220          static void LPLD_SCCB_NoAck(void)
    221          {	
   \                     LPLD_SCCB_NoAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    222            SCCB_SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000006   0x6008             STR      R0,[R1, #+0]
    223            SCCB_DELAY();
   \   00000008   0xF241 0x3088      MOVW     R0,#+5000
   \   0000000C   0x.... 0x....      BL       LPLD_SCCB_Delay
    224            SCCB_SDA_O=1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000014   0x6008             STR      R0,[R1, #+0]
    225            SCCB_DELAY();
   \   00000016   0xF241 0x3088      MOVW     R0,#+5000
   \   0000001A   0x.... 0x....      BL       LPLD_SCCB_Delay
    226            SCCB_SCL=1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000022   0x6008             STR      R0,[R1, #+0]
    227            SCCB_DELAY();
   \   00000024   0xF241 0x3088      MOVW     R0,#+5000
   \   00000028   0x.... 0x....      BL       LPLD_SCCB_Delay
    228            SCCB_SCL=0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000030   0x6008             STR      R0,[R1, #+0]
    229            SCCB_DELAY();
   \   00000032   0xF241 0x3088      MOVW     R0,#+5000
   \   00000036   0x.... 0x....      BL       LPLD_SCCB_Delay
    230          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
    231          
    232          /*
    233           * LPLD_SCCB_WaitAck
    234           * SCCB等待应答信号，内部调用
    235           */

   \                                 In section .text, align 2, keep-with-next
    236          static uint8 LPLD_SCCB_WaitAck(void) 	
    237          {
   \                     LPLD_SCCB_WaitAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    238            SCCB_SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000006   0x6008             STR      R0,[R1, #+0]
    239            SCCB_DELAY();
   \   00000008   0xF241 0x3088      MOVW     R0,#+5000
   \   0000000C   0x.... 0x....      BL       LPLD_SCCB_Delay
    240            SCCB_SDA_O=1;	
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000014   0x6008             STR      R0,[R1, #+0]
    241            SCCB_DELAY();
   \   00000016   0xF241 0x3088      MOVW     R0,#+5000
   \   0000001A   0x.... 0x....      BL       LPLD_SCCB_Delay
    242            
    243            SCCB_SCL=1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000022   0x6008             STR      R0,[R1, #+0]
    244            
    245            SCCB_SDA_IN();
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000028   0x6008             STR      R0,[R1, #+0]
    246            SCCB_DELAY();
   \   0000002A   0xF241 0x3088      MOVW     R0,#+5000
   \   0000002E   0x.... 0x....      BL       LPLD_SCCB_Delay
    247            
    248            if(SCCB_SDA_I)
   \   00000032   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0a04
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD007             BEQ.N    ??LPLD_SCCB_WaitAck_0
    249            {
    250              SCCB_SDA_OUT();
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    251              SCCB_SCL=0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000044   0x6008             STR      R0,[R1, #+0]
    252              return 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xE006             B.N      ??LPLD_SCCB_WaitAck_1
    253            }
    254            SCCB_SDA_OUT();
   \                     ??LPLD_SCCB_WaitAck_0: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    255            SCCB_SCL=0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000054   0x6008             STR      R0,[R1, #+0]
    256            return 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SCCB_WaitAck_1: (+1)
   \   00000058   0xBD02             POP      {R1,PC}          ;; return
    257          }
    258          
    259          /*
    260           * LPLD_SCCB_SendByte
    261           * SCCB发送数据，内部调用
    262           */

   \                                 In section .text, align 2, keep-with-next
    263          static void LPLD_SCCB_SendByte(uint8 data) 
    264          {
   \                     LPLD_SCCB_SendByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    265            uint8 i=8;
   \   00000004   0x2508             MOVS     R5,#+8
   \   00000006   0xE01B             B.N      ??LPLD_SCCB_SendByte_0
    266            while(i--)
    267            {
    268              SCCB_SCL=0;
    269              SCCB_DELAY();
    270              if(data&0x80)
    271              {
    272                SCCB_SDA_O=1; 
    273              }
    274              else 
    275              {
    276                SCCB_SDA_O=0;   
   \                     ??LPLD_SCCB_SendByte_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0xE00B             B.N      ??LPLD_SCCB_SendByte_2
    277              }
   \                     ??LPLD_SCCB_SendByte_3: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0xF241 0x3088      MOVW     R0,#+5000
   \   0000001A   0x.... 0x....      BL       LPLD_SCCB_Delay
   \   0000001E   0x0620             LSLS     R0,R4,#+24
   \   00000020   0xD5F2             BPL.N    ??LPLD_SCCB_SendByte_1
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   00000026   0x6008             STR      R0,[R1, #+0]
    278              data<<=1;
   \                     ??LPLD_SCCB_SendByte_2: (+1)
   \   00000028   0x0064             LSLS     R4,R4,#+1
    279              SCCB_DELAY();
   \   0000002A   0xF241 0x3088      MOVW     R0,#+5000
   \   0000002E   0x.... 0x....      BL       LPLD_SCCB_Delay
    280              SCCB_SCL=1;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000036   0x6008             STR      R0,[R1, #+0]
    281              SCCB_DELAY();
   \   00000038   0xF241 0x3088      MOVW     R0,#+5000
   \   0000003C   0x.... 0x....      BL       LPLD_SCCB_Delay
    282            }
   \                     ??LPLD_SCCB_SendByte_0: (+1)
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x1E45             SUBS     R5,R0,#+1
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1E2             BNE.N    ??LPLD_SCCB_SendByte_3
    283            SCCB_SCL=0;
   \                     ??LPLD_SCCB_SendByte_4: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    284          }
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    285          
    286          /*
    287           * LPLD_SCCB_SendByte
    288           * SCCB接收数据，内部调用
    289           */

   \                                 In section .text, align 2, keep-with-next
    290          static uint8 LPLD_SCCB_ReceiveByte(void)  
    291          { 
   \                     LPLD_SCCB_ReceiveByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    292            uint8 i=8;
   \   00000002   0x2408             MOVS     R4,#+8
    293            uint8 ReceiveByte=0;
   \   00000004   0x2500             MOVS     R5,#+0
    294            
    295            SCCB_SDA_O=1;	
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0804
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    296            SCCB_DELAY();
   \   0000000C   0xF241 0x3088      MOVW     R0,#+5000
   \   00000010   0x.... 0x....      BL       LPLD_SCCB_Delay
    297            
    298            SCCB_SDA_IN();	
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000018   0x6008             STR      R0,[R1, #+0]
   \   0000001A   0xE014             B.N      ??LPLD_SCCB_ReceiveByte_0
    299            
    300            while(i--)
    301            {
    302              ReceiveByte<<=1;      
   \                     ??LPLD_SCCB_ReceiveByte_1: (+1)
   \   0000001C   0x006D             LSLS     R5,R5,#+1
    303              SCCB_SCL=0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000022   0x6008             STR      R0,[R1, #+0]
    304              SCCB_DELAY();
   \   00000024   0xF241 0x3088      MOVW     R0,#+5000
   \   00000028   0x.... 0x....      BL       LPLD_SCCB_Delay
    305              
    306              SCCB_SCL=1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   00000030   0x6008             STR      R0,[R1, #+0]
    307              SCCB_DELAY();	
   \   00000032   0xF241 0x3088      MOVW     R0,#+5000
   \   00000036   0x.... 0x....      BL       LPLD_SCCB_Delay
    308              
    309              if(SCCB_SDA_I)
   \   0000003A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0a04
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD001             BEQ.N    ??LPLD_SCCB_ReceiveByte_0
    310              {
    311                ReceiveByte|=0x01;
   \   00000042   0xF055 0x0501      ORRS     R5,R5,#0x1
    312              }
    313              
    314            }
   \                     ??LPLD_SCCB_ReceiveByte_0: (+1)
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x1E44             SUBS     R4,R0,#+1
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD1E5             BNE.N    ??LPLD_SCCB_ReceiveByte_1
    315            SCCB_SDA_OUT();
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe0a84
   \   00000054   0x6008             STR      R0,[R1, #+0]
    316            SCCB_SCL=0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0800
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    317            
    318            return ReceiveByte;
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    319          }
    320          
    321          /*
    322           * LPLD_SCCB_SendByte
    323           * SCCB延时函数，内部调用
    324           */

   \                                 In section .text, align 2, keep-with-next
    325          static void LPLD_SCCB_Delay(uint16 i)
    326          {	
   \                     LPLD_SCCB_Delay: (+1)
   \   00000000   0xE000             B.N      ??LPLD_SCCB_Delay_0
    327            while(i) 
    328              i--; 
   \                     ??LPLD_SCCB_Delay_1: (+1)
   \   00000002   0x1E40             SUBS     R0,R0,#+1
   \                     ??LPLD_SCCB_Delay_0: (+1)
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD1FB             BNE.N    ??LPLD_SCCB_Delay_1
    329          }
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x43FE0804         DC32     0x43fe0804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x43FE0800         DC32     0x43fe0800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x43FE0A84         DC32     0x43fe0a84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x43FE0A04         DC32     0x43fe0a04
    330          
    331          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_SCCB_Ack
         8   -> LPLD_SCCB_Delay
       0   LPLD_SCCB_Delay
      48   LPLD_SCCB_Init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   LPLD_SCCB_NoAck
         8   -> LPLD_SCCB_Delay
      16   LPLD_SCCB_ReadReg
        16   -> LPLD_SCCB_Ack
        16   -> LPLD_SCCB_NoAck
        16   -> LPLD_SCCB_ReceiveByte
        16   -> LPLD_SCCB_SendByte
        16   -> LPLD_SCCB_Start
        16   -> LPLD_SCCB_Stop
        16   -> LPLD_SCCB_WaitAck
      16   LPLD_SCCB_ReceiveByte
        16   -> LPLD_SCCB_Delay
      16   LPLD_SCCB_SendByte
        16   -> LPLD_SCCB_Delay
       8   LPLD_SCCB_Start
         8   -> LPLD_SCCB_Delay
       8   LPLD_SCCB_Stop
         8   -> LPLD_SCCB_Delay
       8   LPLD_SCCB_WaitAck
         8   -> LPLD_SCCB_Delay
      16   LPLD_SCCB_WriteReg
        16   -> LPLD_SCCB_SendByte
        16   -> LPLD_SCCB_Start
        16   -> LPLD_SCCB_Stop
        16   -> LPLD_SCCB_WaitAck


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
      60  LPLD_SCCB_Ack
      12  LPLD_SCCB_Delay
      52  LPLD_SCCB_Init
      60  LPLD_SCCB_NoAck
     132  LPLD_SCCB_ReadReg
      98  LPLD_SCCB_ReceiveByte
      82  LPLD_SCCB_SendByte
     106  LPLD_SCCB_Start
      44  LPLD_SCCB_Stop
      90  LPLD_SCCB_WaitAck
      72  LPLD_SCCB_WriteReg

 
 828 bytes in section .text
 
 828 bytes of CODE memory

Errors: none
Warnings: none
